// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: readcommend.proto

package readcommend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReadCommendService_GetBooks_FullMethodName   = "/readcommend.ReadCommendService/GetBooks"
	ReadCommendService_GetGenres_FullMethodName  = "/readcommend.ReadCommendService/GetGenres"
	ReadCommendService_GetAuthors_FullMethodName = "/readcommend.ReadCommendService/GetAuthors"
	ReadCommendService_GetSizes_FullMethodName   = "/readcommend.ReadCommendService/GetSizes"
	ReadCommendService_GetEras_FullMethodName    = "/readcommend.ReadCommendService/GetEras"
)

// ReadCommendServiceClient is the client API for ReadCommendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadCommendServiceClient interface {
	GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (*GetBooksResponse, error)
	GetGenres(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGenresResponse, error)
	GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAuthorsResponse, error)
	GetSizes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSizesResponse, error)
	GetEras(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetErasResponse, error)
}

type readCommendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadCommendServiceClient(cc grpc.ClientConnInterface) ReadCommendServiceClient {
	return &readCommendServiceClient{cc}
}

func (c *readCommendServiceClient) GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, ReadCommendService_GetBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readCommendServiceClient) GetGenres(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGenresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenresResponse)
	err := c.cc.Invoke(ctx, ReadCommendService_GetGenres_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readCommendServiceClient) GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorsResponse)
	err := c.cc.Invoke(ctx, ReadCommendService_GetAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readCommendServiceClient) GetSizes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSizesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSizesResponse)
	err := c.cc.Invoke(ctx, ReadCommendService_GetSizes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readCommendServiceClient) GetEras(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetErasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetErasResponse)
	err := c.cc.Invoke(ctx, ReadCommendService_GetEras_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadCommendServiceServer is the server API for ReadCommendService service.
// All implementations must embed UnimplementedReadCommendServiceServer
// for forward compatibility.
type ReadCommendServiceServer interface {
	GetBooks(context.Context, *GetBooksParams) (*GetBooksResponse, error)
	GetGenres(context.Context, *emptypb.Empty) (*GetGenresResponse, error)
	GetAuthors(context.Context, *emptypb.Empty) (*GetAuthorsResponse, error)
	GetSizes(context.Context, *emptypb.Empty) (*GetSizesResponse, error)
	GetEras(context.Context, *emptypb.Empty) (*GetErasResponse, error)
	mustEmbedUnimplementedReadCommendServiceServer()
}

// UnimplementedReadCommendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReadCommendServiceServer struct{}

func (UnimplementedReadCommendServiceServer) GetBooks(context.Context, *GetBooksParams) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedReadCommendServiceServer) GetGenres(context.Context, *emptypb.Empty) (*GetGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedReadCommendServiceServer) GetAuthors(context.Context, *emptypb.Empty) (*GetAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedReadCommendServiceServer) GetSizes(context.Context, *emptypb.Empty) (*GetSizesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSizes not implemented")
}
func (UnimplementedReadCommendServiceServer) GetEras(context.Context, *emptypb.Empty) (*GetErasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEras not implemented")
}
func (UnimplementedReadCommendServiceServer) mustEmbedUnimplementedReadCommendServiceServer() {}
func (UnimplementedReadCommendServiceServer) testEmbeddedByValue()                            {}

// UnsafeReadCommendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadCommendServiceServer will
// result in compilation errors.
type UnsafeReadCommendServiceServer interface {
	mustEmbedUnimplementedReadCommendServiceServer()
}

func RegisterReadCommendServiceServer(s grpc.ServiceRegistrar, srv ReadCommendServiceServer) {
	// If the following call pancis, it indicates UnimplementedReadCommendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReadCommendService_ServiceDesc, srv)
}

func _ReadCommendService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadCommendServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadCommendService_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadCommendServiceServer).GetBooks(ctx, req.(*GetBooksParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadCommendService_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadCommendServiceServer).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadCommendService_GetGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadCommendServiceServer).GetGenres(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadCommendService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadCommendServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadCommendService_GetAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadCommendServiceServer).GetAuthors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadCommendService_GetSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadCommendServiceServer).GetSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadCommendService_GetSizes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadCommendServiceServer).GetSizes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadCommendService_GetEras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadCommendServiceServer).GetEras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadCommendService_GetEras_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadCommendServiceServer).GetEras(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadCommendService_ServiceDesc is the grpc.ServiceDesc for ReadCommendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadCommendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readcommend.ReadCommendService",
	HandlerType: (*ReadCommendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooks",
			Handler:    _ReadCommendService_GetBooks_Handler,
		},
		{
			MethodName: "GetGenres",
			Handler:    _ReadCommendService_GetGenres_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _ReadCommendService_GetAuthors_Handler,
		},
		{
			MethodName: "GetSizes",
			Handler:    _ReadCommendService_GetSizes_Handler,
		},
		{
			MethodName: "GetEras",
			Handler:    _ReadCommendService_GetEras_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "readcommend.proto",
}
