// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: readcommend.proto

package readcommend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReadCommendService_GetBooks_FullMethodName   = "/readcommend.ReadCommendService/GetBooks"
	ReadCommendService_GetGenres_FullMethodName  = "/readcommend.ReadCommendService/GetGenres"
	ReadCommendService_GetAuthors_FullMethodName = "/readcommend.ReadCommendService/GetAuthors"
	ReadCommendService_GetSizes_FullMethodName   = "/readcommend.ReadCommendService/GetSizes"
	ReadCommendService_GetEras_FullMethodName    = "/readcommend.ReadCommendService/GetEras"
)

// ReadCommendServiceClient is the client API for ReadCommendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadCommendServiceClient interface {
	GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error)
	GetGenres(ctx context.Context, in *GetGenresParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Genre], error)
	GetAuthors(ctx context.Context, in *GetAuthorsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Author], error)
	GetSizes(ctx context.Context, in *GetSizesParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Size], error)
	GetEras(ctx context.Context, in *GetErasParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Era], error)
}

type readCommendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadCommendServiceClient(cc grpc.ClientConnInterface) ReadCommendServiceClient {
	return &readCommendServiceClient{cc}
}

func (c *readCommendServiceClient) GetBooks(ctx context.Context, in *GetBooksParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Book], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReadCommendService_ServiceDesc.Streams[0], ReadCommendService_GetBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBooksParams, Book]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetBooksClient = grpc.ServerStreamingClient[Book]

func (c *readCommendServiceClient) GetGenres(ctx context.Context, in *GetGenresParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Genre], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReadCommendService_ServiceDesc.Streams[1], ReadCommendService_GetGenres_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetGenresParams, Genre]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetGenresClient = grpc.ServerStreamingClient[Genre]

func (c *readCommendServiceClient) GetAuthors(ctx context.Context, in *GetAuthorsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Author], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReadCommendService_ServiceDesc.Streams[2], ReadCommendService_GetAuthors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAuthorsParams, Author]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetAuthorsClient = grpc.ServerStreamingClient[Author]

func (c *readCommendServiceClient) GetSizes(ctx context.Context, in *GetSizesParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Size], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReadCommendService_ServiceDesc.Streams[3], ReadCommendService_GetSizes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSizesParams, Size]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetSizesClient = grpc.ServerStreamingClient[Size]

func (c *readCommendServiceClient) GetEras(ctx context.Context, in *GetErasParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Era], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReadCommendService_ServiceDesc.Streams[4], ReadCommendService_GetEras_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetErasParams, Era]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetErasClient = grpc.ServerStreamingClient[Era]

// ReadCommendServiceServer is the server API for ReadCommendService service.
// All implementations must embed UnimplementedReadCommendServiceServer
// for forward compatibility.
type ReadCommendServiceServer interface {
	GetBooks(*GetBooksParams, grpc.ServerStreamingServer[Book]) error
	GetGenres(*GetGenresParams, grpc.ServerStreamingServer[Genre]) error
	GetAuthors(*GetAuthorsParams, grpc.ServerStreamingServer[Author]) error
	GetSizes(*GetSizesParams, grpc.ServerStreamingServer[Size]) error
	GetEras(*GetErasParams, grpc.ServerStreamingServer[Era]) error
	mustEmbedUnimplementedReadCommendServiceServer()
}

// UnimplementedReadCommendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReadCommendServiceServer struct{}

func (UnimplementedReadCommendServiceServer) GetBooks(*GetBooksParams, grpc.ServerStreamingServer[Book]) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedReadCommendServiceServer) GetGenres(*GetGenresParams, grpc.ServerStreamingServer[Genre]) error {
	return status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedReadCommendServiceServer) GetAuthors(*GetAuthorsParams, grpc.ServerStreamingServer[Author]) error {
	return status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedReadCommendServiceServer) GetSizes(*GetSizesParams, grpc.ServerStreamingServer[Size]) error {
	return status.Errorf(codes.Unimplemented, "method GetSizes not implemented")
}
func (UnimplementedReadCommendServiceServer) GetEras(*GetErasParams, grpc.ServerStreamingServer[Era]) error {
	return status.Errorf(codes.Unimplemented, "method GetEras not implemented")
}
func (UnimplementedReadCommendServiceServer) mustEmbedUnimplementedReadCommendServiceServer() {}
func (UnimplementedReadCommendServiceServer) testEmbeddedByValue()                            {}

// UnsafeReadCommendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadCommendServiceServer will
// result in compilation errors.
type UnsafeReadCommendServiceServer interface {
	mustEmbedUnimplementedReadCommendServiceServer()
}

func RegisterReadCommendServiceServer(s grpc.ServiceRegistrar, srv ReadCommendServiceServer) {
	// If the following call pancis, it indicates UnimplementedReadCommendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReadCommendService_ServiceDesc, srv)
}

func _ReadCommendService_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBooksParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadCommendServiceServer).GetBooks(m, &grpc.GenericServerStream[GetBooksParams, Book]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetBooksServer = grpc.ServerStreamingServer[Book]

func _ReadCommendService_GetGenres_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetGenresParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadCommendServiceServer).GetGenres(m, &grpc.GenericServerStream[GetGenresParams, Genre]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetGenresServer = grpc.ServerStreamingServer[Genre]

func _ReadCommendService_GetAuthors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAuthorsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadCommendServiceServer).GetAuthors(m, &grpc.GenericServerStream[GetAuthorsParams, Author]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetAuthorsServer = grpc.ServerStreamingServer[Author]

func _ReadCommendService_GetSizes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSizesParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadCommendServiceServer).GetSizes(m, &grpc.GenericServerStream[GetSizesParams, Size]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetSizesServer = grpc.ServerStreamingServer[Size]

func _ReadCommendService_GetEras_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetErasParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadCommendServiceServer).GetEras(m, &grpc.GenericServerStream[GetErasParams, Era]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReadCommendService_GetErasServer = grpc.ServerStreamingServer[Era]

// ReadCommendService_ServiceDesc is the grpc.ServiceDesc for ReadCommendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadCommendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readcommend.ReadCommendService",
	HandlerType: (*ReadCommendServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _ReadCommendService_GetBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGenres",
			Handler:       _ReadCommendService_GetGenres_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAuthors",
			Handler:       _ReadCommendService_GetAuthors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSizes",
			Handler:       _ReadCommendService_GetSizes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEras",
			Handler:       _ReadCommendService_GetEras_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "readcommend.proto",
}
